<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Openvpn on Random Stuff from GlacJAY</title>
    <link>https://glacjay.info/tags/openvpn/</link>
    <description>Recent content in Openvpn on Random Stuff from GlacJAY</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 17 Sep 2011 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://glacjay.info/tags/openvpn/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>修改 OpenVPN 实现加密算法的自动协商</title>
      <link>https://glacjay.info/post/2011-09-17/%E4%BF%AE%E6%94%B9-openvpn-%E5%AE%9E%E7%8E%B0%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E7%9A%84%E8%87%AA%E5%8A%A8%E5%8D%8F%E5%95%86/</link>
      <pubDate>Sat, 17 Sep 2011 00:00:00 +0000</pubDate>
      
      <guid>https://glacjay.info/post/2011-09-17/%E4%BF%AE%E6%94%B9-openvpn-%E5%AE%9E%E7%8E%B0%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E7%9A%84%E8%87%AA%E5%8A%A8%E5%8D%8F%E5%95%86/</guid>
      <description>&lt;p&gt;由&lt;a href=&#34;https://glacjay.info/post/2011-01-18/openvpn-%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96%E8%BF%87%E7%A8%8B%E5%88%86%E6%9E%90/&#34;&gt;另一篇博&lt;/a&gt;中的分析可知，OpenVPN 中有两个加解密通道。一条是标准的 SSL 协议通道，被 OpenVPN 用于协商自己所用的密钥。这个通道的加密算法当然也是通过 SSL 协议来进行协商的，可以通过 &lt;code&gt;--tls-cipher&lt;/code&gt; 选项来进行配置。另一条是 OpenVPN 自己的加解密通道，用于交换实际的数据，也就是虚拟网卡抓到的 IP 报文。这个通道的加密算法则是通过 &lt;code&gt;--cipher&lt;/code&gt; 和 &lt;code&gt;--auth&lt;/code&gt; 两个选项，分别在通调两端指定的。&lt;/p&gt;

&lt;p&gt;对于第二条通道的加密算法，必须要同时在两端分别指定一致的选项，有时候不是很方便（当然，我研究的还是 2.1.1 版本的 OpenVPN ，不知道最新的版本还是不是这样）。比如说，我想通过在服务端修改配置，指定加密算法，然后让连接我的客户端自动用同一个算法。最简单的修改思路，就是借用第一条通道中的算法协商机制，从 SSL 对象中取得协商出来的算法。&lt;/p&gt;

&lt;p&gt;具体做法就是：&lt;/p&gt;

&lt;p&gt;首先，在函数 &lt;code&gt;do_init_crypto_tls_c1()&lt;/code&gt; 中，去掉对函数 &lt;code&gt;init_key_type()&lt;/code&gt; 的调用。这个调用就是根据 &lt;code&gt;--cipher&lt;/code&gt; 和 &lt;code&gt;--auth&lt;/code&gt; 选项进行算法配置的地方，我们要动态协商，自然是不需要这个了。&lt;/p&gt;

&lt;p&gt;但同时，这会引起接下来一个步骤的错误。在函数 &lt;code&gt;crypto_adjust_frame_parameters()&lt;/code&gt; 中，会根据之前配置的算法进行报文中密钥空间的分配。现在还不知道算法，怎么知道要分配多少空间呢？就只能改成最大值了。分别改为 &lt;code&gt;MAX_CIPHER_KEY_LENGTH&lt;/code&gt; 和 &lt;code&gt;MAX_HMAC_KEY_LENGTH&lt;/code&gt; 就行了。当然，这样改不仅浪费空间，而且也不够严谨，因为 key length 和 IV length 不是一回事，却只能都用 &lt;code&gt;MAX_CIPHER_KEY_LENGTH&lt;/code&gt; 来初始化。&lt;/p&gt;

&lt;p&gt;最后就是在 SSL 协商好之后，从里面取加密算法了。具体位置在 &lt;code&gt;key_method_2_write()&lt;/code&gt; 和 &lt;code&gt;key_method_2_read()&lt;/code&gt; 两个函数中，对 &lt;code&gt;generate_key_expansion()&lt;/code&gt; 函数的调用之处了。在调用之前，初始化一下 &lt;code&gt;key_type&lt;/code&gt; 就行了：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;struct key_type *key_type = (struct key_type *) session-&amp;gt;opt-&amp;gt;key_type;
key_type-&amp;gt;cipher = ks-&amp;gt;ssl-&amp;gt;enc_read_ctx-&amp;gt;cipher;
key_type-&amp;gt;cipher_length = EVP_CIPHER_key_length (session-&amp;gt;opt-&amp;gt;key_type-&amp;gt;cipher);
#if OPENSSL_VERSION_NUMBER &amp;gt;= 0x010000000L
key_type-&amp;gt;digest = ks-&amp;gt;ssl-&amp;gt;read_hash-&amp;gt;digest;
#else
key_type-&amp;gt;digest = ks-&amp;gt;ssl-&amp;gt;read_hash;
#endif
key_type-&amp;gt;hmac_length = EVP_MD_size (session-&amp;gt;opt-&amp;gt;key_type-&amp;gt;digest);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样就行了。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>OpenVPN 的并发测试方法</title>
      <link>https://glacjay.info/post/2011-01-19/openvpn-%E7%9A%84%E5%B9%B6%E5%8F%91%E6%B5%8B%E8%AF%95%E6%96%B9%E6%B3%95/</link>
      <pubDate>Wed, 19 Jan 2011 00:00:00 +0000</pubDate>
      
      <guid>https://glacjay.info/post/2011-01-19/openvpn-%E7%9A%84%E5%B9%B6%E5%8F%91%E6%B5%8B%E8%AF%95%E6%96%B9%E6%B3%95/</guid>
      <description>&lt;p&gt;由于 OpenVPN 本身协议的特殊性，用一般的方法不太好测它的并发。看过 LoadRunner ，但也最多只支持标准的 SSL/TLS 协议（当然，我也没细看这个）。于是动手改了其客户端的实现，最终完成任务。&lt;/p&gt;

&lt;p&gt;其实阻止我们在一台机器上同时跑很多 OpenVPN 客户端的因素就只有虚拟网卡一个。貌似装十个左右的虚拟网卡驱动之后，机器就不行了。于是解决办法也很简单，把虚拟网卡相关的功能跳过就可以了。根据&lt;a href=&#34;https://glacjay.info/post/2011-01-18/openvpn-%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96%E8%BF%87%E7%A8%8B%E5%88%86%E6%9E%90/&#34;&gt;上篇&lt;/a&gt;的说明，只要在 &lt;code&gt;incoming_push_message()&lt;/code&gt; 函数中，把对 &lt;code&gt;do_up()&lt;/code&gt; 的调用直接换成 &lt;code&gt;initialization_sequence_completed()&lt;/code&gt; 就 OK 了。&lt;/p&gt;

&lt;p&gt;当然，这样一来，流量的来源也就没有了，而没有数据流量也就无所谓测试了，最多测下并发接入的性能。要流量也很简单，改下 &lt;code&gt;io_wait()&lt;/code&gt; 、 &lt;code&gt;read_tun()&lt;/code&gt; 、 &lt;code&gt;write_tun()&lt;/code&gt; 这几个函数的实现，手工组个 Ping 请求的 IP 报文给 OpenVPN 去发就行了。&lt;/p&gt;

&lt;p&gt;在这个过程中我也终于搞清楚那个 &lt;code&gt;checksum&lt;/code&gt; 到底是怎么回事儿，原来在累加一遍求出一个和之后，如果这个和本身超过了 &lt;code&gt;16&lt;/code&gt; 位，那么还要把这个和继续按 &lt;code&gt;16&lt;/code&gt; 位来切分求和，这样才是最终结果。之前看 WikiPedia 上的那个例子，一直就没搞明白那个 &lt;code&gt;2&lt;/code&gt; 到底是打哪儿来的。&lt;/p&gt;

&lt;p&gt;最后，就是要把起客户端这个过程给自动化了。于是又去研究 Windows 的 Batch 脚本，&lt;code&gt;for&lt;/code&gt; 是循环， &lt;code&gt;start&lt;/code&gt; 是后台运行， &lt;code&gt;ping&lt;/code&gt; 用来模拟 &lt;code&gt;sleep&lt;/code&gt; ， &lt;code&gt;taskkill&lt;/code&gt; 是强制杀掉，搞了个 &lt;code&gt;1000&lt;/code&gt; 客户端连了断、断了连的自动化测试出来。丢在那边跑了两天，服务端表示很淡定。&lt;/p&gt;

&lt;p&gt;以上。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>OpenVPN 的初始化过程分析</title>
      <link>https://glacjay.info/post/2011-01-18/openvpn-%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96%E8%BF%87%E7%A8%8B%E5%88%86%E6%9E%90/</link>
      <pubDate>Tue, 18 Jan 2011 00:00:00 +0000</pubDate>
      
      <guid>https://glacjay.info/post/2011-01-18/openvpn-%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96%E8%BF%87%E7%A8%8B%E5%88%86%E6%9E%90/</guid>
      <description>&lt;p&gt;题外话：Eclipse CDT 很给力，至少在我用起来，比 gVim + Cscope 或者 SourceInsight 要来得给力，推荐一下。&lt;/p&gt;

&lt;p&gt;更准确的来说，是 OpenVPN 的客户端与服务端之间，从协商密钥、到推送配置，以及最后的网卡与路由配置生效，开始进行 IP 报文的传递，这整个的过程。&lt;/p&gt;

&lt;p&gt;完了。嗯，整个过程就像上面说的，这几个步骤而已。&lt;/p&gt;

&lt;p&gt;不过重点当然还是代码啦。以前一直以为 OpenVPN 的点对点模式下，两端会进行一个决定谁是客户端，谁是服务端的协商过程，一直都想知道是怎么做的。后来才知道，原来通过配置信息，就已经决定好这个了。当然，我下面说的是客户端-服务器模式。&lt;/p&gt;

&lt;p&gt;那么先来看客户端的初始化。客户端进入的还是点对点模式，进入点，也是其事件循环的入口为 &lt;code&gt;tunnel_point_to_point()&lt;/code&gt; 。然后是 &lt;code&gt;init_instance()&lt;/code&gt; ，在这个函数中进行客户端自身的初始化，包括各种数据结构的建立，像分片啦、压缩啦、socket 啦、MTU 啦等。其中代码量最多的是 SSL 模块的初始化（ &lt;code&gt;do_init_crypto&lt;/code&gt; 和 &lt;code&gt;do_init_frame_tls&lt;/code&gt; ），要调很多的 OpenSSL 的函数；还有对 socket 的初始化，分为两个阶段，第一个阶段解析域名，第二个阶段发起连接（如果是 TCP 的话）。我一直搞不十分清楚的是 MTU ，也就是 &lt;code&gt;frame&lt;/code&gt; 模块，因为太细节而且太分散了。&lt;/p&gt;

&lt;p&gt;然后通过 &lt;code&gt;pre_select()&lt;/code&gt; 函数进入 &lt;code&gt;check_tls()&lt;/code&gt; 过程。因为是客户端，这时就会准备好发送第一个握手报文，命令码为 &lt;code&gt;P_CONTROL_HARD_RESET_CLIENT_V1/2&lt;/code&gt; 。按照&lt;a href=&#34;https://glacjay.info/post/2010-11-22/openvpn-%E7%9A%84%E6%8F%A1%E6%89%8B%E5%8D%8F%E8%AE%AE%E5%88%86%E6%9E%90/&#34;&gt;上篇&lt;/a&gt;所说与服务器交换好了密钥之后，会在 &lt;code&gt;tls_process()&lt;/code&gt; 函数的 &lt;code&gt;3852&lt;/code&gt; 行，设置连接成功建立的标志 &lt;code&gt;connection_established&lt;/code&gt; 。&lt;/p&gt;

&lt;p&gt;之后，还是在 &lt;code&gt;pre_select()&lt;/code&gt; 的 &lt;code&gt;check_connection_established()&lt;/code&gt; 函数中，初始化 &lt;code&gt;push_request_interval&lt;/code&gt; 定时器，由客户端开始发送推送配置的请求报文。推送配置功能的报文走的是和交换密钥相同的 SSL 隧道，按理说蛮可靠的，不过还是实现了重传，不知道是基于什么考虑。通过 &lt;code&gt;check_incoming_control_channel()&lt;/code&gt; 函数收到服务器推过来的额外配置之后，调用 &lt;code&gt;process_incoming_push_msg()&lt;/code&gt; 函数解析一下收到的配置字符串，就要根据这些配置，调用 &lt;code&gt;do_up()&lt;/code&gt; 函数进行最终的初始化工作了。&lt;/p&gt;

&lt;p&gt;在 &lt;code&gt;do_up()&lt;/code&gt; 中，先调用 &lt;code&gt;do_open_tun()&lt;/code&gt; ，根据由服务器发过来的所分配置的虚拟 IP 地址把虚拟网卡给起了，然后把 &lt;code&gt;route_wakeup&lt;/code&gt; 定时器给激活一下，告诉 &lt;code&gt;check_add_routes()&lt;/code&gt; 函数加一下路由，完了之后就是 &lt;code&gt;initialization_sequence_completed()&lt;/code&gt; 了。&lt;/p&gt;

&lt;p&gt;服务器嘛，也就是顺序不一样。首先，虚拟网卡和系统路由可以先建起来，因为不需要等其他人推配置。然后就等着客户端发过来第一个报文了，然后握手，然后把配置推过去，然后就完了。&lt;/p&gt;

&lt;p&gt;然后就是在虚拟网卡跟物理网卡之间当搬运工啦。因为服务器要服务多个客户端，所以还用二叉树实现了一个调度器。&lt;/p&gt;

&lt;p&gt;就这样。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>OpenVPN 的握手协议分析</title>
      <link>https://glacjay.info/post/2010-11-22/openvpn-%E7%9A%84%E6%8F%A1%E6%89%8B%E5%8D%8F%E8%AE%AE%E5%88%86%E6%9E%90/</link>
      <pubDate>Mon, 22 Nov 2010 00:00:00 +0000</pubDate>
      
      <guid>https://glacjay.info/post/2010-11-22/openvpn-%E7%9A%84%E6%8F%A1%E6%89%8B%E5%8D%8F%E8%AE%AE%E5%88%86%E6%9E%90/</guid>
      <description>&lt;p&gt;又是好久没来这儿了啊。&lt;/p&gt;

&lt;p&gt;最近因为工作需要（其实也没需要那么多），一直在断断续续地看 OpenVPN 的代码，终于大概搞清楚了它的握手是怎么个流程了。简单来说的话其实非常的简单，首先在 &lt;code&gt;reliable&lt;/code&gt; 模块中实现了一个可靠的 UDP 报文协议，就是加上超时重传和确认报文的功能；然后用该协议交换一个 Hard Reset 命令，开始握手；最后建立 SSL 对象，并且通过内存 &lt;code&gt;BIO&lt;/code&gt; 在可靠 UDP 协议的基础上转发 OpenSSL 的握手协议报文，通过这个 SSL 连接交换 OpenVPN 自己的密钥。接下来就是用这些密钥，该干嘛干嘛了。&lt;/p&gt;

&lt;p&gt;本来还写了好多，不过太乱，写不下去了，还是简单点吧。具体实现就是，首先在 &lt;code&gt;key_state_init()&lt;/code&gt; 函数中，初始化了 &lt;code&gt;ssl&lt;/code&gt; 、 &lt;code&gt;ssl_bio&lt;/code&gt; 、 &lt;code&gt;ct_in&lt;/code&gt; 、 &lt;code&gt;ct_out&lt;/code&gt; 这几个相关的成员， &lt;code&gt;ssl&lt;/code&gt; 就是普通 SSL 程序里面的 &lt;code&gt;SSL&lt;/code&gt; 对象， &lt;code&gt;ssl_bio&lt;/code&gt; 是以 &lt;code&gt;BIO&lt;/code&gt; 接口来读写这个 &lt;code&gt;ssl&lt;/code&gt; 成员而准备的，&lt;code&gt;tls_process()&lt;/code&gt; 中通过 &lt;code&gt;ssl_bio&lt;/code&gt; 这个成员完成 OpenVPN 自己的密钥交换，完成从 &lt;code&gt;S_START&lt;/code&gt; 到 &lt;code&gt;S_GOT_KEY&lt;/code&gt; 这几个状态的转换。而 &lt;code&gt;ct_in&lt;/code&gt; 和 &lt;code&gt;ct_out&lt;/code&gt; 则是这个 &lt;code&gt;ssl&lt;/code&gt; 对象的后端，不是通常用的 socket BIO 对象，而是两个 memory BIO 对象，为的就是得到 &lt;code&gt;ssl&lt;/code&gt; 对象要发给对端的密文，然后通过可靠 UDP 协议来转发。这样， &lt;code&gt;tls_process()&lt;/code&gt; 的主要工作就是操作这几个对象，外加可靠 UDP 模块的那几个队列了。&lt;/p&gt;

&lt;p&gt;这里的关键就是通过 OpenSSL 实现提供的 memory BIO 对象抓取密文包的功能。如果是在其他没有这个功能接口的语言实现或封装中，则可以使用 socketpair 这种方法来抓，我今天就试着改了一下 OpenVPN ，这种方法是可行的。具体就是把其中一个 socket 给 ssl 当后端，另一个 socket 就可以用来读写密文了。注意 &lt;code&gt;socketpair()&lt;/code&gt; 调用中的 &lt;code&gt;type&lt;/code&gt; 参数要加上 &lt;code&gt;SOCK_NONBLOCK&lt;/code&gt; 。&lt;/p&gt;

&lt;p&gt;不过在 Erlang 这个语言中，甚至就连 &lt;code&gt;socketpair&lt;/code&gt; 这个调用都没封。搜了一下它的源码，才发现自己实现一个也非常的简单，怪不得。下面摘自 &lt;code&gt;otp_src_R14B/lib/kernel/test/inet_sockopt_SUITE.erl&lt;/code&gt; 文件：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-erlang&#34;&gt;create_socketpair(ListenOptions,ConnectOptions) -&amp;gt;
    ?line {ok,LS}=gen_tcp:listen(0,ListenOptions),
    ?line {ok,Port}=inet:port(LS),
    ?line {ok,CS}=gen_tcp:connect(localhost,Port,ConnectOptions),
    ?line {ok,AS}=gen_tcp:accept(LS),
    ?line gen_tcp:close(LS),
    {AS,CS}.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;至于前面的 &lt;code&gt;?line&lt;/code&gt; 是啥，咱就不需要关心了。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>