<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Erlang on Random Stuff from GlacJAY</title>
    <link>https://glacjay.info/tags/erlang/</link>
    <description>Recent content in Erlang on Random Stuff from GlacJAY</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 22 Nov 2010 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://glacjay.info/tags/erlang/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>OpenVPN 的握手协议分析</title>
      <link>https://glacjay.info/post/2010-11-22/openvpn-%E7%9A%84%E6%8F%A1%E6%89%8B%E5%8D%8F%E8%AE%AE%E5%88%86%E6%9E%90/</link>
      <pubDate>Mon, 22 Nov 2010 00:00:00 +0000</pubDate>
      
      <guid>https://glacjay.info/post/2010-11-22/openvpn-%E7%9A%84%E6%8F%A1%E6%89%8B%E5%8D%8F%E8%AE%AE%E5%88%86%E6%9E%90/</guid>
      <description>&lt;p&gt;又是好久没来这儿了啊。&lt;/p&gt;

&lt;p&gt;最近因为工作需要（其实也没需要那么多），一直在断断续续地看 OpenVPN 的代码，终于大概搞清楚了它的握手是怎么个流程了。简单来说的话其实非常的简单，首先在 &lt;code&gt;reliable&lt;/code&gt; 模块中实现了一个可靠的 UDP 报文协议，就是加上超时重传和确认报文的功能；然后用该协议交换一个 Hard Reset 命令，开始握手；最后建立 SSL 对象，并且通过内存 &lt;code&gt;BIO&lt;/code&gt; 在可靠 UDP 协议的基础上转发 OpenSSL 的握手协议报文，通过这个 SSL 连接交换 OpenVPN 自己的密钥。接下来就是用这些密钥，该干嘛干嘛了。&lt;/p&gt;

&lt;p&gt;本来还写了好多，不过太乱，写不下去了，还是简单点吧。具体实现就是，首先在 &lt;code&gt;key_state_init()&lt;/code&gt; 函数中，初始化了 &lt;code&gt;ssl&lt;/code&gt; 、 &lt;code&gt;ssl_bio&lt;/code&gt; 、 &lt;code&gt;ct_in&lt;/code&gt; 、 &lt;code&gt;ct_out&lt;/code&gt; 这几个相关的成员， &lt;code&gt;ssl&lt;/code&gt; 就是普通 SSL 程序里面的 &lt;code&gt;SSL&lt;/code&gt; 对象， &lt;code&gt;ssl_bio&lt;/code&gt; 是以 &lt;code&gt;BIO&lt;/code&gt; 接口来读写这个 &lt;code&gt;ssl&lt;/code&gt; 成员而准备的，&lt;code&gt;tls_process()&lt;/code&gt; 中通过 &lt;code&gt;ssl_bio&lt;/code&gt; 这个成员完成 OpenVPN 自己的密钥交换，完成从 &lt;code&gt;S_START&lt;/code&gt; 到 &lt;code&gt;S_GOT_KEY&lt;/code&gt; 这几个状态的转换。而 &lt;code&gt;ct_in&lt;/code&gt; 和 &lt;code&gt;ct_out&lt;/code&gt; 则是这个 &lt;code&gt;ssl&lt;/code&gt; 对象的后端，不是通常用的 socket BIO 对象，而是两个 memory BIO 对象，为的就是得到 &lt;code&gt;ssl&lt;/code&gt; 对象要发给对端的密文，然后通过可靠 UDP 协议来转发。这样， &lt;code&gt;tls_process()&lt;/code&gt; 的主要工作就是操作这几个对象，外加可靠 UDP 模块的那几个队列了。&lt;/p&gt;

&lt;p&gt;这里的关键就是通过 OpenSSL 实现提供的 memory BIO 对象抓取密文包的功能。如果是在其他没有这个功能接口的语言实现或封装中，则可以使用 socketpair 这种方法来抓，我今天就试着改了一下 OpenVPN ，这种方法是可行的。具体就是把其中一个 socket 给 ssl 当后端，另一个 socket 就可以用来读写密文了。注意 &lt;code&gt;socketpair()&lt;/code&gt; 调用中的 &lt;code&gt;type&lt;/code&gt; 参数要加上 &lt;code&gt;SOCK_NONBLOCK&lt;/code&gt; 。&lt;/p&gt;

&lt;p&gt;不过在 Erlang 这个语言中，甚至就连 &lt;code&gt;socketpair&lt;/code&gt; 这个调用都没封。搜了一下它的源码，才发现自己实现一个也非常的简单，怪不得。下面摘自 &lt;code&gt;otp_src_R14B/lib/kernel/test/inet_sockopt_SUITE.erl&lt;/code&gt; 文件：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-erlang&#34;&gt;create_socketpair(ListenOptions,ConnectOptions) -&amp;gt;
    ?line {ok,LS}=gen_tcp:listen(0,ListenOptions),
    ?line {ok,Port}=inet:port(LS),
    ?line {ok,CS}=gen_tcp:connect(localhost,Port,ConnectOptions),
    ?line {ok,AS}=gen_tcp:accept(LS),
    ?line gen_tcp:close(LS),
    {AS,CS}.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;至于前面的 &lt;code&gt;?line&lt;/code&gt; 是啥，咱就不需要关心了。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>