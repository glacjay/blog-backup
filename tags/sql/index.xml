<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sql on Random Stuff from GlacJAY</title>
    <link>https://glacjay.info/tags/sql/</link>
    <description>Recent content in Sql on Random Stuff from GlacJAY</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 02 Mar 2010 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://glacjay.info/tags/sql/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Oracle 建库 SQL 脚本</title>
      <link>https://glacjay.info/post/2010-03-02/oracle-%E5%BB%BA%E5%BA%93-sql-%E8%84%9A%E6%9C%AC/</link>
      <pubDate>Tue, 02 Mar 2010 00:00:00 +0000</pubDate>
      
      <guid>https://glacjay.info/post/2010-03-02/oracle-%E5%BB%BA%E5%BA%93-sql-%E8%84%9A%E6%9C%AC/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;-- 首先是删除该数据库中该用户名下的所有表、序列与触发器，
-- 其中触发器是通过表格级联删除的。
declare
  cursor usertables is
    select *
    from user_tables
    where table_name not like &#39;BIN$%&#39;;
  cursor usersequences is
    select *
    from user_sequences;
begin
  for next_row in usertables loop
    execute immediate
      &#39;drop table &#39; || next_row.table_name ||
      &#39; cascade constraints&#39;;
  end loop;
  for next_row in usersequences loop
    execute immediate
      &#39;drop sequence &#39; || next_row.sequence_name;
  end loop;
end;
/

-- 然后，就是一砣……的建表语句啦，
-- 比方说下面就是两个含外键的表。
create table &amp;quot;A&amp;quot; (
  &amp;quot;ID&amp;quot; integer primary key,
  &amp;quot;NAME&amp;quot; nvarchar2(64) not null         -- nvarchar2类型支持UTF8
);
-- Oracle中的表名与字段名最好写成这样引号加全大写的形式。

create table &amp;quot;B&amp;quot; (
  &amp;quot;ID&amp;quot; integer primary key,
  &amp;quot;A&amp;quot; integer not null references &amp;quot;B&amp;quot; on delete cascade,
  &amp;quot;VALUE&amp;quot; nvarchar2(64) not null
);

-- 接下来是第三部分，为所有的表创建对应的序列和触发器，以实现自增主键。
declare
  cursor usertables is
    select cols.table_name, cols.column_name
    from all_constraints cons, all_cons_columns cols
    where cols.owner = (
      select sys_context(&#39;USERENV&#39;, &#39;SESSION_USER&#39;)
      from dual)
    and cols.table_name not like &#39;BIN$%&#39;
    and cons.constraint_type = &#39;P&#39;
    and cons.constraint_name = cols.constraint_name
    and cons.owner = cols.owner
begin
  for nextrow in usertables loop
    -- 1000以下的留作初始测试数据用，见下
    execute immediate
      &#39;create sequence &amp;quot;&#39; || nextrow.table_name ||
      &#39;_PK_SEQ&amp;quot; start with 1000&#39;;
    execute immediate
      &#39;create or replace trigger &amp;quot;&#39; || nextrow.table_name ||
      &#39;_PK_TRG&amp;quot; before insert on &amp;quot;&#39; || nextrow.table_name ||
      &#39;&amp;quot; for each row begin if :new.&amp;quot;&#39; || nextrow.column_name ||
      &#39;&amp;quot; is null then select &amp;quot;&#39; || nextrow.table_name ||
      &#39;_PK_SEQ&amp;quot;.nextval into :new.&amp;quot;&#39; || nextrow.column_name ||
      &#39;&amp;quot; from dual; end if; end;&#39;;
  end loop;
end;
/

-- 最后当然就是测试数据啦。
insert into &amp;quot;A&amp;quot; (ID, NAME) values (1, &#39;first name&#39;);
insert into &amp;quot;B&amp;quot; (ID, AID, VALUE) values (1, 1, &#39;Jay&#39;);
insert into &amp;quot;B&amp;quot; (ID, AID, VALUE) values (2, 1, &#39;杰&#39;);
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>