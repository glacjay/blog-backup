<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Flex on Random Stuff from GlacJAY</title>
    <link>https://glacjay.info/tags/flex/</link>
    <description>Recent content in Flex on Random Stuff from GlacJAY</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 19 Mar 2009 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://glacjay.info/tags/flex/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>对 Bison 手册中的 C&#43;&#43; 的例子的总结</title>
      <link>https://glacjay.info/post/2009-03-19/%E5%AF%B9-bison-%E6%89%8B%E5%86%8C%E4%B8%AD%E7%9A%84-c-%E7%9A%84%E4%BE%8B%E5%AD%90%E7%9A%84%E6%80%BB%E7%BB%93/</link>
      <pubDate>Thu, 19 Mar 2009 00:00:00 +0000</pubDate>
      
      <guid>https://glacjay.info/post/2009-03-19/%E5%AF%B9-bison-%E6%89%8B%E5%86%8C%E4%B8%AD%E7%9A%84-c-%E7%9A%84%E4%BE%8B%E5%AD%90%E7%9A%84%E6%80%BB%E7%BB%93/</guid>
      <description>&lt;p&gt;注意，我用的软件版本为：Bison - 2.4.1，Flex - 2.5.35 。至于老的版本会怎样我就不深究了。工具不是重点。&lt;/p&gt;

&lt;hr /&gt;

&lt;pre&gt;&lt;code&gt;%skeleton &amp;quot;lalr1.cc&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以用&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;%language &amp;quot;c++&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;来代替了，其中参数 &amp;ldquo;c++&amp;rdquo; 不区分大小写。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;如我在&lt;a href=&#34;https://glacjay.info/post/2009-03-18/bison-%E4%B8%AD%E7%9A%84-prologue-%E7%9A%84%E6%A0%BC%E5%BC%8F%E5%8F%98%E8%BF%81/&#34;&gt;上一篇 Blog&lt;/a&gt; 中所说，分别在 &lt;code&gt;%union&lt;/code&gt; 的前后放不同的 &lt;code&gt;%{ %}&lt;/code&gt; 形式的 Prologue 这种方式对于需要输出头文件的情况已经不适用了，新的方法为在&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;%code requires { ... }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;中放 Bison 定义要用到的 C/C++ 代码，在&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;%code provides { ... }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;中放需要 Bison 定义的 C/C++ 代码。这两部分的代码都会原样输出到生成的头文件中。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;在 &lt;code&gt;%code provides&lt;/code&gt; 块中要如下定义 &lt;code&gt;YYSTYPE&lt;/code&gt; 和 &lt;code&gt;YYLTYPE&lt;/code&gt; 这两个类型：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;typedef yy::Parser::semantic_type YYSTYPE;
typedef yy::Parser::location_type YYLTYPE;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;不然 Flex 就会抱怨说这两个类型没有声明，我不知道为什么。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;这一点我一直有点奇怪，既然在 &lt;code&gt;%option&lt;/code&gt; 中已经指定了 &lt;code&gt;noyywrap&lt;/code&gt; 这个选项，为什么还要对 &lt;code&gt;yywrap&lt;/code&gt; 做 &lt;code&gt;#undef&lt;/code&gt; 再 &lt;code&gt;#define&lt;/code&gt; 的处理呢，也许是之前版本的 Bug 吧，反正我用的这个版本只要指定了那个选项就 OK 了。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Flex 中有两个选项是针对与 Bison 之间的配合使用的，就是 &lt;code&gt;bison-bridge&lt;/code&gt; 和 &lt;code&gt;bison-locations&lt;/code&gt; 。不过我是没搞懂这两个选项是怎么用的啦，至少是按照例子中的那样定义 &lt;code&gt;YY_DECL&lt;/code&gt; 这个宏的情况下。按照错误提示更改了 &lt;code&gt;yylex&lt;/code&gt; 的两个参数的名称之后，编译出来的程序会 segmentation fault 的。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;其他就没什么说的了，按照例子上的来就可以了。&lt;/p&gt;

&lt;p&gt;PS. 其实有个蛮不错的 Bison 的替代品，叫作 Lemon 的一个 Parser Generator ，是写 SQLite 的那个家伙搞出来的，并且就用在了 SQLite 的实现中。这东东较 Bison 有很多使用上的改进，用起来会很舒服，唯一可惜的就是不自动支持 &lt;code&gt;Location&lt;/code&gt; ，至于这个特性有没有那么重要呢？谁知道，先就这样吧。&lt;/p&gt;

&lt;p&gt;PPS. 其实还是有几个有趣的针对 C++ 后端的 Parser Generator 的，像 YARD 就是一个充分挖掘了 C++ 的模板特性的 Parser 库，用起来感觉会很不一样就是了；Boost.Spirit 则是充分发挥了 C++ 的运算符重载能力的 Parser 库，算的上是 C++ 的 Internal DSL 应用了；再有就是连 Guido 都称赞过的 ANTLR 了，只是为其写 C 后端的那个家伙一直说要完成 C++ 后端又一直不见影子。其实我倒是很想用 ANTLR 这种 Lexer 和 Parser 原生整合在一起的工具的，看回来有时间是不是自己动手实现一个 C++ 的后端出来玩玩。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>